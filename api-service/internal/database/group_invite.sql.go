// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: group_invite.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptGroupInvite = `-- name: AcceptGroupInvite :one
UPDATE group_invites
SET
	accepted = TRUE
WHERE
	invite_id = $1
	AND receiver_id = $2
RETURNING
	invite_id, group_id, sender_id, receiver_id, accepted, created_at
`

type AcceptGroupInviteParams struct {
	InviteID   pgtype.UUID `json:"invite_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) AcceptGroupInvite(ctx context.Context, arg AcceptGroupInviteParams) (GroupInvite, error) {
	row := q.db.QueryRow(ctx, acceptGroupInvite, arg.InviteID, arg.ReceiverID)
	var i GroupInvite
	err := row.Scan(
		&i.InviteID,
		&i.GroupID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const createGroupInvite = `-- name: CreateGroupInvite :one
INSERT INTO
	group_invites (group_id, sender_id, receiver_id, created_at)
VALUES
	($1, $2, $3, $4)
RETURNING
	invite_id, group_id, sender_id, receiver_id, accepted, created_at
`

type CreateGroupInviteParams struct {
	GroupID    pgtype.UUID      `json:"group_id"`
	SenderID   pgtype.UUID      `json:"sender_id"`
	ReceiverID pgtype.UUID      `json:"receiver_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateGroupInvite(ctx context.Context, arg CreateGroupInviteParams) (GroupInvite, error) {
	row := q.db.QueryRow(ctx, createGroupInvite,
		arg.GroupID,
		arg.SenderID,
		arg.ReceiverID,
		arg.CreatedAt,
	)
	var i GroupInvite
	err := row.Scan(
		&i.InviteID,
		&i.GroupID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupInvite = `-- name: DeleteGroupInvite :exec
DELETE FROM group_invites
WHERE
	sender_id = $1
	AND receiver_id = $2
`

type DeleteGroupInviteParams struct {
	SenderID   pgtype.UUID `json:"sender_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) DeleteGroupInvite(ctx context.Context, arg DeleteGroupInviteParams) error {
	_, err := q.db.Exec(ctx, deleteGroupInvite, arg.SenderID, arg.ReceiverID)
	return err
}

const getGroupInvites = `-- name: GetGroupInvites :many
SELECT
	rr.invite_id, rr.group_id, rr.sender_id, rr.receiver_id, rr.accepted, rr.created_at,
	u.user_name receiver_name,
	u.profile_image receiver_image
FROM
	(
		SELECT
			invite_id, group_id, sender_id, receiver_id, accepted, created_at
		FROM
			group_invites
		WHERE
			group_id = $1
		LIMIT
			$2
		OFFSET
			$3
	) rr
	LEFT JOIN users u ON rr.receiver_id = u.user_id
`

type GetGroupInvitesParams struct {
	GroupID pgtype.UUID `json:"group_id"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type GetGroupInvitesRow struct {
	InviteID      pgtype.UUID      `json:"invite_id"`
	GroupID       pgtype.UUID      `json:"group_id"`
	SenderID      pgtype.UUID      `json:"sender_id"`
	ReceiverID    pgtype.UUID      `json:"receiver_id"`
	Accepted      pgtype.Bool      `json:"accepted"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	ReceiverName  pgtype.Text      `json:"receiver_name"`
	ReceiverImage pgtype.Text      `json:"receiver_image"`
}

func (q *Queries) GetGroupInvites(ctx context.Context, arg GetGroupInvitesParams) ([]GetGroupInvitesRow, error) {
	rows, err := q.db.Query(ctx, getGroupInvites, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupInvitesRow{}
	for rows.Next() {
		var i GetGroupInvitesRow
		if err := rows.Scan(
			&i.InviteID,
			&i.GroupID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Accepted,
			&i.CreatedAt,
			&i.ReceiverName,
			&i.ReceiverImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupInvites = `-- name: GetUserGroupInvites :many
SELECT
	rr.invite_id, rr.group_id, rr.sender_id, rr.receiver_id, rr.accepted, rr.created_at,
	u.user_name sender_name,
	u.profile_image sender_image
FROM
	(
		SELECT
			invite_id, group_id, sender_id, receiver_id, accepted, created_at
		FROM
			group_invites
		WHERE
			receiver_id = $1
		LIMIT
			$2
		OFFSET
			$3
	) rr
	LEFT JOIN users u ON rr.sender_id = u.user_id
`

type GetUserGroupInvitesParams struct {
	ReceiverID pgtype.UUID `json:"receiver_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetUserGroupInvitesRow struct {
	InviteID    pgtype.UUID      `json:"invite_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	SenderID    pgtype.UUID      `json:"sender_id"`
	ReceiverID  pgtype.UUID      `json:"receiver_id"`
	Accepted    pgtype.Bool      `json:"accepted"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	SenderName  pgtype.Text      `json:"sender_name"`
	SenderImage pgtype.Text      `json:"sender_image"`
}

func (q *Queries) GetUserGroupInvites(ctx context.Context, arg GetUserGroupInvitesParams) ([]GetUserGroupInvitesRow, error) {
	rows, err := q.db.Query(ctx, getUserGroupInvites, arg.ReceiverID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserGroupInvitesRow{}
	for rows.Next() {
		var i GetUserGroupInvitesRow
		if err := rows.Scan(
			&i.InviteID,
			&i.GroupID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Accepted,
			&i.CreatedAt,
			&i.SenderName,
			&i.SenderImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectGroupInvite = `-- name: RejectGroupInvite :one
UPDATE group_invites
SET
	accepted = FALSE
WHERE
	invite_id = $1
	AND receiver_id = $2
RETURNING
	invite_id, group_id, sender_id, receiver_id, accepted, created_at
`

type RejectGroupInviteParams struct {
	InviteID   pgtype.UUID `json:"invite_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) RejectGroupInvite(ctx context.Context, arg RejectGroupInviteParams) (GroupInvite, error) {
	row := q.db.QueryRow(ctx, rejectGroupInvite, arg.InviteID, arg.ReceiverID)
	var i GroupInvite
	err := row.Scan(
		&i.InviteID,
		&i.GroupID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}
