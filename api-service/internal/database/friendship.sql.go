// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: friendship.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO
	friendships (user1_id, user2_id, created_at)
VALUES
	($1, $2, $3)
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

type CreateFriendshipParams struct {
	User1ID   pgtype.UUID      `json:"user1_id"`
	User2ID   pgtype.UUID      `json:"user2_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, createFriendship, arg.User1ID, arg.User2ID, arg.CreatedAt)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :one
DELETE FROM friendships
WHERE
	(
		user1_id = $1
		AND user2_id = $2
	)
	OR (
		user2_id = $1
		AND user1_id = $2
	)
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

type DeleteFriendshipParams struct {
	User1ID pgtype.UUID `json:"user1_id"`
	User2ID pgtype.UUID `json:"user2_id"`
}

func (q *Queries) DeleteFriendship(ctx context.Context, arg DeleteFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, deleteFriendship, arg.User1ID, arg.User2ID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendshipById = `-- name: DeleteFriendshipById :one
DELETE FROM friendships
WHERE
	friendship_id = $1
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

func (q *Queries) DeleteFriendshipById(ctx context.Context, friendshipID pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, deleteFriendshipById, friendshipID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const findFriendshipById = `-- name: FindFriendshipById :one
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	friendship_id = $1
`

func (q *Queries) FindFriendshipById(ctx context.Context, friendshipID pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, findFriendshipById, friendshipID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const findFriendshipByUserIds = `-- name: FindFriendshipByUserIds :one
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	(
		user1_id = $1
		AND user2_id = $2
	)
	OR (
		user2_id = $1
		AND user1_id = $2
	)
`

type FindFriendshipByUserIdsParams struct {
	User1ID pgtype.UUID `json:"user1_id"`
	User2ID pgtype.UUID `json:"user2_id"`
}

func (q *Queries) FindFriendshipByUserIds(ctx context.Context, arg FindFriendshipByUserIdsParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, findFriendshipByUserIds, arg.User1ID, arg.User2ID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUserFriendIds = `-- name: GetAllUserFriendIds :many
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	user1_id = $1
	OR user2_id = $1
`

func (q *Queries) GetAllUserFriendIds(ctx context.Context, user1ID pgtype.UUID) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, getAllUserFriendIds, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friendship{}
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.FriendshipID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserFriendInfo = `-- name: GetAllUserFriendInfo :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image
FROM
	(
		SELECT
			CASE
				WHEN user1_id = $1 THEN user2_id
				WHEN user2_id = $1 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $1
			OR user2_id = $1
	) fr
	LEFT JOIN users u ON fr.fr_id = u.user_id
LIMIT
	$2
OFFSET
	$3
`

type GetAllUserFriendInfoParams struct {
	User1ID pgtype.UUID `json:"user1_id"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type GetAllUserFriendInfoRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     pgtype.Text `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) GetAllUserFriendInfo(ctx context.Context, arg GetAllUserFriendInfoParams) ([]GetAllUserFriendInfoRow, error) {
	rows, err := q.db.Query(ctx, getAllUserFriendInfo, arg.User1ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUserFriendInfoRow{}
	for rows.Next() {
		var i GetAllUserFriendInfoRow
		if err := rows.Scan(&i.UserID, &i.UserName, &i.ProfileImage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendshipTable = `-- name: GetFriendshipTable :many
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
`

func (q *Queries) GetFriendshipTable(ctx context.Context) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, getFriendshipTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friendship{}
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.FriendshipID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFriendByName = `-- name: GetUserFriendByName :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image
FROM
	(
		SELECT
			CASE
				WHEN user1_id = $1 THEN user2_id
				WHEN user2_id = $1 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $1
			OR user2_id = $1
	) fr
	LEFT JOIN users u ON fr.fr_id = u.user_id
WHERE
	u.user_name LIKE ('%' || $2 || '%')
LIMIT
	$3
OFFSET
	$4
`

type GetUserFriendByNameParams struct {
	User1ID pgtype.UUID `json:"user1_id"`
	Column2 pgtype.Text `json:"column_2"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type GetUserFriendByNameRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     pgtype.Text `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) GetUserFriendByName(ctx context.Context, arg GetUserFriendByNameParams) ([]GetUserFriendByNameRow, error) {
	rows, err := q.db.Query(ctx, getUserFriendByName,
		arg.User1ID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFriendByNameRow{}
	for rows.Next() {
		var i GetUserFriendByNameRow
		if err := rows.Scan(&i.UserID, &i.UserName, &i.ProfileImage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
