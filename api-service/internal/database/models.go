// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type NotificationType string

const (
	NotificationTypeFriendRequest NotificationType = "friend_request"
	NotificationTypeRoomInvite    NotificationType = "room_invite"
)

func (e *NotificationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationType(s)
	case string:
		*e = NotificationType(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationType: %T", src)
	}
	return nil
}

type NullNotificationType struct {
	NotificationType NotificationType `json:"notification_type"`
	Valid            bool             `json:"valid"` // Valid is true if NotificationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationType) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationType), nil
}

type FriendRequest struct {
	RequestID  pgtype.UUID      `json:"request_id"`
	SenderID   pgtype.UUID      `json:"sender_id"`
	ReceiverID pgtype.UUID      `json:"receiver_id"`
	Accepted   pgtype.Bool      `json:"accepted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

type Friendship struct {
	FriendshipID pgtype.UUID      `json:"friendship_id"`
	User1ID      pgtype.UUID      `json:"user1_id"`
	User2ID      pgtype.UUID      `json:"user2_id"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

type Message struct {
	MessageID pgtype.UUID      `json:"message_id"`
	RoomID    pgtype.UUID      `json:"room_id"`
	SenderID  pgtype.UUID      `json:"sender_id"`
	Text      string           `json:"text"`
	MediaUrl  pgtype.Text      `json:"media_url"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type Notification struct {
	NotificationID pgtype.UUID      `json:"notification_id"`
	UserID         pgtype.UUID      `json:"user_id"`
	Message        string           `json:"message"`
	Type           NotificationType `json:"type"`
	IDRef          pgtype.UUID      `json:"id_ref"`
	Seen           pgtype.Bool      `json:"seen"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

type RefreshToken struct {
	Token     string           `json:"token"`
	UserID    pgtype.UUID      `json:"user_id"`
	UserEmail string           `json:"user_email"`
	UserName  string           `json:"user_name"`
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type Room struct {
	RoomID      pgtype.UUID      `json:"room_id"`
	RoomName    string           `json:"room_name"`
	RoomPicture pgtype.Text      `json:"room_picture"`
	CreatedBy   pgtype.UUID      `json:"created_by"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type RoomInvite struct {
	InviteID   pgtype.UUID      `json:"invite_id"`
	RoomID     pgtype.UUID      `json:"room_id"`
	SenderID   pgtype.UUID      `json:"sender_id"`
	ReceiverID pgtype.UUID      `json:"receiver_id"`
	Accepted   pgtype.Bool      `json:"accepted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

type RoomMember struct {
	RoomID   pgtype.UUID      `json:"room_id"`
	MemberID pgtype.UUID      `json:"member_id"`
	JoinedAt pgtype.Timestamp `json:"joined_at"`
}

type User struct {
	UserID       pgtype.UUID      `json:"user_id"`
	UserEmail    string           `json:"user_email"`
	UserName     string           `json:"user_name"`
	Password     string           `json:"password"`
	ProfileImage pgtype.Text      `json:"profile_image"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}
