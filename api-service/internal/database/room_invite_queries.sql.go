// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: room_invite_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptRoomInvite = `-- name: AcceptRoomInvite :one
UPDATE room_invites
SET
	accepted = TRUE
WHERE
	invite_id = $1
	AND receiver_id = $2
RETURNING
	invite_id, room_id, sender_id, receiver_id, accepted, created_at
`

type AcceptRoomInviteParams struct {
	InviteID   pgtype.UUID `json:"invite_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) AcceptRoomInvite(ctx context.Context, arg AcceptRoomInviteParams) (RoomInvite, error) {
	row := q.db.QueryRow(ctx, acceptRoomInvite, arg.InviteID, arg.ReceiverID)
	var i RoomInvite
	err := row.Scan(
		&i.InviteID,
		&i.RoomID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const createRoomInvite = `-- name: CreateRoomInvite :one
INSERT INTO
	room_invites (room_id, sender_id, receiver_id)
VALUES
	($1, $2, $3)
RETURNING
	invite_id, room_id, sender_id, receiver_id, accepted, created_at
`

type CreateRoomInviteParams struct {
	RoomID     pgtype.UUID `json:"room_id"`
	SenderID   pgtype.UUID `json:"sender_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) CreateRoomInvite(ctx context.Context, arg CreateRoomInviteParams) (RoomInvite, error) {
	row := q.db.QueryRow(ctx, createRoomInvite, arg.RoomID, arg.SenderID, arg.ReceiverID)
	var i RoomInvite
	err := row.Scan(
		&i.InviteID,
		&i.RoomID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoomInvite = `-- name: DeleteRoomInvite :exec
DELETE FROM room_invites
WHERE
	sender_id = $1
	AND receiver_id = $2
`

type DeleteRoomInviteParams struct {
	SenderID   pgtype.UUID `json:"sender_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) DeleteRoomInvite(ctx context.Context, arg DeleteRoomInviteParams) error {
	_, err := q.db.Exec(ctx, deleteRoomInvite, arg.SenderID, arg.ReceiverID)
	return err
}

const getRoomInvitesByReceiverId = `-- name: GetRoomInvitesByReceiverId :many
SELECT
	rr.invite_id, rr.room_id, rr.sender_id, rr.receiver_id, rr.accepted, rr.created_at,
	u.user_name sender_name,
	u.profile_image sender_image
FROM
	(
		SELECT
			invite_id, room_id, sender_id, receiver_id, accepted, created_at
		FROM
			room_invites
		WHERE
			receiver_id = $1
		LIMIT
			$2
		OFFSET
			$3
	) rr
	LEFT JOIN users u ON rr.sender_id = u.user_id
`

type GetRoomInvitesByReceiverIdParams struct {
	ReceiverID pgtype.UUID `json:"receiver_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetRoomInvitesByReceiverIdRow struct {
	InviteID    pgtype.UUID      `json:"invite_id"`
	RoomID      pgtype.UUID      `json:"room_id"`
	SenderID    pgtype.UUID      `json:"sender_id"`
	ReceiverID  pgtype.UUID      `json:"receiver_id"`
	Accepted    pgtype.Bool      `json:"accepted"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	SenderName  pgtype.Text      `json:"sender_name"`
	SenderImage pgtype.Text      `json:"sender_image"`
}

func (q *Queries) GetRoomInvitesByReceiverId(ctx context.Context, arg GetRoomInvitesByReceiverIdParams) ([]GetRoomInvitesByReceiverIdRow, error) {
	rows, err := q.db.Query(ctx, getRoomInvitesByReceiverId, arg.ReceiverID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomInvitesByReceiverIdRow{}
	for rows.Next() {
		var i GetRoomInvitesByReceiverIdRow
		if err := rows.Scan(
			&i.InviteID,
			&i.RoomID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Accepted,
			&i.CreatedAt,
			&i.SenderName,
			&i.SenderImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomInvitesByRoomId = `-- name: GetRoomInvitesByRoomId :many
SELECT
	rr.invite_id, rr.room_id, rr.sender_id, rr.receiver_id, rr.accepted, rr.created_at,
	u.user_name receiver_name,
	u.profile_image receiver_image
FROM
	(
		SELECT
			invite_id, room_id, sender_id, receiver_id, accepted, created_at
		FROM
			room_invites
		WHERE
			room_id = $1
		LIMIT
			$2
		OFFSET
			$3
	) rr
	LEFT JOIN users u ON rr.receiver_id = u.user_id
`

type GetRoomInvitesByRoomIdParams struct {
	RoomID pgtype.UUID `json:"room_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetRoomInvitesByRoomIdRow struct {
	InviteID      pgtype.UUID      `json:"invite_id"`
	RoomID        pgtype.UUID      `json:"room_id"`
	SenderID      pgtype.UUID      `json:"sender_id"`
	ReceiverID    pgtype.UUID      `json:"receiver_id"`
	Accepted      pgtype.Bool      `json:"accepted"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	ReceiverName  pgtype.Text      `json:"receiver_name"`
	ReceiverImage pgtype.Text      `json:"receiver_image"`
}

func (q *Queries) GetRoomInvitesByRoomId(ctx context.Context, arg GetRoomInvitesByRoomIdParams) ([]GetRoomInvitesByRoomIdRow, error) {
	rows, err := q.db.Query(ctx, getRoomInvitesByRoomId, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomInvitesByRoomIdRow{}
	for rows.Next() {
		var i GetRoomInvitesByRoomIdRow
		if err := rows.Scan(
			&i.InviteID,
			&i.RoomID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Accepted,
			&i.CreatedAt,
			&i.ReceiverName,
			&i.ReceiverImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectRoomInvite = `-- name: RejectRoomInvite :one
DELETE FROM room_invites
WHERE
	invite_id = $1
	AND receiver_id = $2
RETURNING
	invite_id, room_id, sender_id, receiver_id, accepted, created_at
`

type RejectRoomInviteParams struct {
	InviteID   pgtype.UUID `json:"invite_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) RejectRoomInvite(ctx context.Context, arg RejectRoomInviteParams) (RoomInvite, error) {
	row := q.db.QueryRow(ctx, rejectRoomInvite, arg.InviteID, arg.ReceiverID)
	var i RoomInvite
	err := row.Scan(
		&i.InviteID,
		&i.RoomID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}
