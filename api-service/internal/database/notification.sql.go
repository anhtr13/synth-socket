// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notification.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO
	notifications (message, user_id, type, id_ref, created_at)
VALUES
	($1, $2, $3, $4, $5)
RETURNING
	notification_id, user_id, message, type, id_ref, seen, created_at
`

type CreateNotificationParams struct {
	Message   string           `json:"message"`
	UserID    pgtype.UUID      `json:"user_id"`
	Type      NotificationType `json:"type"`
	IDRef     pgtype.UUID      `json:"id_ref"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.Message,
		arg.UserID,
		arg.Type,
		arg.IDRef,
		arg.CreatedAt,
	)
	var i Notification
	err := row.Scan(
		&i.NotificationID,
		&i.UserID,
		&i.Message,
		&i.Type,
		&i.IDRef,
		&i.Seen,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE
	notification_id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, notificationID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotification, notificationID)
	return err
}

const getAllNotifications = `-- name: GetAllNotifications :many
SELECT
	notification_id, user_id, message, type, id_ref, seen, created_at
FROM
	notifications
WHERE
	user_id = $1
	AND seen = FALSE
LIMIT
	$2
OFFSET
	$3
`

type GetAllNotificationsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetAllNotifications(ctx context.Context, arg GetAllNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getAllNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.NotificationID,
			&i.UserID,
			&i.Message,
			&i.Type,
			&i.IDRef,
			&i.Seen,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSeenNotification = `-- name: MarkSeenNotification :exec
UPDATE notifications
SET
	seen = TRUE
WHERE
	notification_id = $1
	AND user_id = $2
`

type MarkSeenNotificationParams struct {
	NotificationID pgtype.UUID `json:"notification_id"`
	UserID         pgtype.UUID `json:"user_id"`
}

func (q *Queries) MarkSeenNotification(ctx context.Context, arg MarkSeenNotificationParams) error {
	_, err := q.db.Exec(ctx, markSeenNotification, arg.NotificationID, arg.UserID)
	return err
}
