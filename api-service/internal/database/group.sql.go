// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: group.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO
	groups (
		"group_name",
		"group_picture",
		"created_by",
		"created_at"
	)
VALUES
	($1, $2, $3, $4)
RETURNING
	group_id, group_name, group_picture, created_by, created_at
`

type CreateGroupParams struct {
	GroupName    string           `json:"group_name"`
	GroupPicture pgtype.Text      `json:"group_picture"`
	CreatedBy    pgtype.UUID      `json:"created_by"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup,
		arg.GroupName,
		arg.GroupPicture,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var i Group
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.GroupPicture,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const findGroupByCreatorAndName = `-- name: FindGroupByCreatorAndName :one
SELECT
	group_id, group_name, group_picture, created_by, created_at
FROM
	groups
WHERE
	created_by = $1
	AND group_name = $2
`

type FindGroupByCreatorAndNameParams struct {
	CreatedBy pgtype.UUID `json:"created_by"`
	GroupName string      `json:"group_name"`
}

func (q *Queries) FindGroupByCreatorAndName(ctx context.Context, arg FindGroupByCreatorAndNameParams) (Group, error) {
	row := q.db.QueryRow(ctx, findGroupByCreatorAndName, arg.CreatedBy, arg.GroupName)
	var i Group
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.GroupPicture,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const findGroupById = `-- name: FindGroupById :one
SELECT
	group_id, group_name, group_picture, created_by, created_at
FROM
	groups
WHERE
	group_id = $1
`

func (q *Queries) FindGroupById(ctx context.Context, groupID pgtype.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, findGroupById, groupID)
	var i Group
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.GroupPicture,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getAllGroup = `-- name: GetAllGroup :many
SELECT
	group_id, group_name, group_picture, created_by, created_at
FROM
	groups
ORDER BY
	group_name
LIMIT
	$1
OFFSET
	$2
`

type GetAllGroupParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllGroup(ctx context.Context, arg GetAllGroupParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getAllGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.GroupPicture,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroupIds = `-- name: GetAllGroupIds :many
SELECT
	group_id
FROM
	groups
`

func (q *Queries) GetAllGroupIds(ctx context.Context) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getAllGroupIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var group_id pgtype.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupByGroupName = `-- name: GetGroupByGroupName :many
SELECT
	group_id, group_name, group_picture, created_by, created_at
FROM
	groups
WHERE
	group_name LIKE ('%' || $1 || '%')
ORDER BY
	group_name
LIMIT
	$2
OFFSET
	$3
`

type GetGroupByGroupNameParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) GetGroupByGroupName(ctx context.Context, arg GetGroupByGroupNameParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupByGroupName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.GroupPicture,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
