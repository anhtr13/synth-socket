// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: message_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO
	messages (room_id, sender_id, text, media_url)
VALUES
	($1, $2, $3, $4)
RETURNING
	message_id, room_id, sender_id, text, media_url, created_at
`

type CreateMessageParams struct {
	RoomID   pgtype.UUID `json:"room_id"`
	SenderID pgtype.UUID `json:"sender_id"`
	Text     string      `json:"text"`
	MediaUrl pgtype.Text `json:"media_url"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.RoomID,
		arg.SenderID,
		arg.Text,
		arg.MediaUrl,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.RoomID,
		&i.SenderID,
		&i.Text,
		&i.MediaUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessageById = `-- name: DeleteMessageById :one
DELETE FROM messages
WHERE
	message_id = $1
RETURNING
	message_id, room_id, sender_id, text, media_url, created_at
`

func (q *Queries) DeleteMessageById(ctx context.Context, messageID pgtype.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, deleteMessageById, messageID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.RoomID,
		&i.SenderID,
		&i.Text,
		&i.MediaUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getMesssagesByRoomId = `-- name: GetMesssagesByRoomId :many
SELECT
	message_id, room_id, sender_id, text, media_url, created_at
FROM
	messages
WHERE
	room_id = $1
ORDER BY
	created_at DESC
LIMIT
	$2
OFFSET
	$3
`

type GetMesssagesByRoomIdParams struct {
	RoomID pgtype.UUID `json:"room_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetMesssagesByRoomId(ctx context.Context, arg GetMesssagesByRoomIdParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMesssagesByRoomId, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.RoomID,
			&i.SenderID,
			&i.Text,
			&i.MediaUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
