// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
	users (user_email, user_name, password, profile_image)
VALUES
	($1, $2, $3, $4)
RETURNING
	user_id,
	user_email,
	user_name,
	profile_image,
	created_at
`

type CreateUserParams struct {
	UserEmail    string      `json:"user_email"`
	UserName     string      `json:"user_name"`
	Password     string      `json:"password"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

type CreateUserRow struct {
	UserID       pgtype.UUID      `json:"user_id"`
	UserEmail    string           `json:"user_email"`
	UserName     string           `json:"user_name"`
	ProfileImage pgtype.Text      `json:"profile_image"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserEmail,
		arg.UserName,
		arg.Password,
		arg.ProfileImage,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ProfileImage,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT
	user_id, user_email, user_name, password, profile_image, created_at
FROM
	users
WHERE
	user_email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.Password,
		&i.ProfileImage,
		&i.CreatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT
	user_id, user_email, user_name, password, profile_image, created_at
FROM
	users
WHERE
	user_id = $1
`

func (q *Queries) FindUserById(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.Password,
		&i.ProfileImage,
		&i.CreatedAt,
	)
	return i, err
}

const findUserInfoById = `-- name: FindUserInfoById :one
SELECT
	user_id,
	user_name,
	profile_image
FROM
	users
WHERE
	user_id = $1
`

type FindUserInfoByIdRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     string      `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) FindUserInfoById(ctx context.Context, userID pgtype.UUID) (FindUserInfoByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserInfoById, userID)
	var i FindUserInfoByIdRow
	err := row.Scan(&i.UserID, &i.UserName, &i.ProfileImage)
	return i, err
}

const getAllUserInfo = `-- name: GetAllUserInfo :many
SELECT
	u.user_id, u.user_name, u.profile_image,
	CASE
		WHEN fr_id IS NOT NULL THEN TRUE
		ELSE FALSE
	END AS is_friend
FROM
	(
		SELECT
			user_id,
			user_name,
			profile_image
		FROM
			users
		ORDER BY
			user_name
		LIMIT
			$1
		OFFSET
			$2
	) u
	LEFT JOIN (
		SELECT
			CASE
				WHEN user1_id = $3 THEN user2_id
				WHEN user2_id = $3 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $3
			OR user2_id = $3
	) fr ON u.user_id = fr.fr_id
`

type GetAllUserInfoParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetAllUserInfoRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     string      `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
	IsFriend     bool        `json:"is_friend"`
}

func (q *Queries) GetAllUserInfo(ctx context.Context, arg GetAllUserInfoParams) ([]GetAllUserInfoRow, error) {
	rows, err := q.db.Query(ctx, getAllUserInfo, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUserInfoRow{}
	for rows.Next() {
		var i GetAllUserInfoRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ProfileImage,
			&i.IsFriend,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserInfoByName = `-- name: GetAllUserInfoByName :many
SELECT
	u.user_id, u.user_name, u.profile_image,
	CASE
		WHEN fr_id IS NOT NULL THEN TRUE
		ELSE FALSE
	END AS is_friend
FROM
	(
		SELECT
			user_id,
			user_name,
			profile_image
		FROM
			users
		WHERE
			user_name LIKE ('%' || $3 || '%')
		ORDER BY
			user_name
		LIMIT
			$1
		OFFSET
			$2
	) u
	LEFT JOIN (
		SELECT
			CASE
				WHEN user1_id = $4 THEN user2_id
				WHEN user2_id = $4 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $4
			OR user2_id = $4
	) fr ON u.user_id = fr.fr_id
`

type GetAllUserInfoByNameParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Name   pgtype.Text `json:"name"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetAllUserInfoByNameRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     string      `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
	IsFriend     bool        `json:"is_friend"`
}

func (q *Queries) GetAllUserInfoByName(ctx context.Context, arg GetAllUserInfoByNameParams) ([]GetAllUserInfoByNameRow, error) {
	rows, err := q.db.Query(ctx, getAllUserInfoByName,
		arg.Limit,
		arg.Offset,
		arg.Name,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUserInfoByNameRow{}
	for rows.Next() {
		var i GetAllUserInfoByNameRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ProfileImage,
			&i.IsFriend,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE users
SET
	user_name = $1,
	password = $2,
	profile_image = $3
WHERE
	user_id = $4
RETURNING
	user_id,
	user_email,
	user_name,
	profile_image
`

type UpdateUserInfoParams struct {
	UserName     string      `json:"user_name"`
	Password     string      `json:"password"`
	ProfileImage pgtype.Text `json:"profile_image"`
	UserID       pgtype.UUID `json:"user_id"`
}

type UpdateUserInfoRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserEmail    string      `json:"user_email"`
	UserName     string      `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (UpdateUserInfoRow, error) {
	row := q.db.QueryRow(ctx, updateUserInfo,
		arg.UserName,
		arg.Password,
		arg.ProfileImage,
		arg.UserID,
	)
	var i UpdateUserInfoRow
	err := row.Scan(
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ProfileImage,
	)
	return i, err
}
