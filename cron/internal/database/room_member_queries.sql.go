// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: room_member_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMemmbersInRoom = `-- name: CountMemmbersInRoom :one
SELECT
	count(member_id)
FROM
	room_members
WHERE
	room_id = $1
`

func (q *Queries) CountMemmbersInRoom(ctx context.Context, roomID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countMemmbersInRoom, roomID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRoomMember = `-- name: CreateRoomMember :one
INSERT INTO
	room_members ("room_id", "member_id")
VALUES
	($1, $2)
RETURNING
	room_id, member_id, joined_at
`

type CreateRoomMemberParams struct {
	RoomID   pgtype.UUID `json:"room_id"`
	MemberID pgtype.UUID `json:"member_id"`
}

func (q *Queries) CreateRoomMember(ctx context.Context, arg CreateRoomMemberParams) (RoomMember, error) {
	row := q.db.QueryRow(ctx, createRoomMember, arg.RoomID, arg.MemberID)
	var i RoomMember
	err := row.Scan(&i.RoomID, &i.MemberID, &i.JoinedAt)
	return i, err
}

const deleteRoomMemmber = `-- name: DeleteRoomMemmber :exec
DELETE FROM room_members
WHERE
	room_id = $1
	AND member_id = $2
`

type DeleteRoomMemmberParams struct {
	RoomID   pgtype.UUID `json:"room_id"`
	MemberID pgtype.UUID `json:"member_id"`
}

func (q *Queries) DeleteRoomMemmber(ctx context.Context, arg DeleteRoomMemmberParams) error {
	_, err := q.db.Exec(ctx, deleteRoomMemmber, arg.RoomID, arg.MemberID)
	return err
}

const findRoomMember = `-- name: FindRoomMember :one
SELECT
	room_id, member_id, joined_at
FROM
	room_members
WHERE
	room_id = $1
	AND member_id = $2
`

type FindRoomMemberParams struct {
	RoomID   pgtype.UUID `json:"room_id"`
	MemberID pgtype.UUID `json:"member_id"`
}

func (q *Queries) FindRoomMember(ctx context.Context, arg FindRoomMemberParams) (RoomMember, error) {
	row := q.db.QueryRow(ctx, findRoomMember, arg.RoomID, arg.MemberID)
	var i RoomMember
	err := row.Scan(&i.RoomID, &i.MemberID, &i.JoinedAt)
	return i, err
}

const getAllMemberInfoByRoomId = `-- name: GetAllMemberInfoByRoomId :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image,
	r.joined_at
FROM
	(
		SELECT
			room_id, member_id, joined_at
		FROM
			room_members
		WHERE
			room_id = $1
	) r
	LEFT JOIN users u ON r.member_id = u.user_id
ORDER BY
	r.joined_at
LIMIT
	$2
OFFSET
	$3
`

type GetAllMemberInfoByRoomIdParams struct {
	RoomID pgtype.UUID `json:"room_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetAllMemberInfoByRoomIdRow struct {
	UserID       pgtype.UUID      `json:"user_id"`
	UserName     pgtype.Text      `json:"user_name"`
	ProfileImage pgtype.Text      `json:"profile_image"`
	JoinedAt     pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetAllMemberInfoByRoomId(ctx context.Context, arg GetAllMemberInfoByRoomIdParams) ([]GetAllMemberInfoByRoomIdRow, error) {
	rows, err := q.db.Query(ctx, getAllMemberInfoByRoomId, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllMemberInfoByRoomIdRow{}
	for rows.Next() {
		var i GetAllMemberInfoByRoomIdRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ProfileImage,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMemberInfoByRoomAndUserName = `-- name: GetRoomMemberInfoByRoomAndUserName :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image,
	r.joined_at
FROM
	(
		SELECT
			room_id, member_id, joined_at
		FROM
			room_members
		WHERE
			room_id = $1
		ORDER BY
			joined_at
		LIMIT
			$2
		OFFSET
			$3
	) r
	LEFT JOIN users u ON r.member_id = u.user_id
WHERE
	u.user_name LIKE ('%' || $4 || '%')
`

type GetRoomMemberInfoByRoomAndUserNameParams struct {
	RoomID pgtype.UUID `json:"room_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Name   pgtype.Text `json:"name"`
}

type GetRoomMemberInfoByRoomAndUserNameRow struct {
	UserID       pgtype.UUID      `json:"user_id"`
	UserName     pgtype.Text      `json:"user_name"`
	ProfileImage pgtype.Text      `json:"profile_image"`
	JoinedAt     pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetRoomMemberInfoByRoomAndUserName(ctx context.Context, arg GetRoomMemberInfoByRoomAndUserNameParams) ([]GetRoomMemberInfoByRoomAndUserNameRow, error) {
	rows, err := q.db.Query(ctx, getRoomMemberInfoByRoomAndUserName,
		arg.RoomID,
		arg.Limit,
		arg.Offset,
		arg.Name,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomMemberInfoByRoomAndUserNameRow{}
	for rows.Next() {
		var i GetRoomMemberInfoByRoomAndUserNameRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ProfileImage,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMemberInfoByRoomId = `-- name: GetRoomMemberInfoByRoomId :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image,
	r.joined_at
FROM
	(
		SELECT
			room_id, member_id, joined_at
		FROM
			room_members
		WHERE
			room_id = $1
	) r
	LEFT JOIN users u ON r.member_id = u.user_id
ORDER BY
	r.joined_at
LIMIT
	$2
OFFSET
	$3
`

type GetRoomMemberInfoByRoomIdParams struct {
	RoomID pgtype.UUID `json:"room_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetRoomMemberInfoByRoomIdRow struct {
	UserID       pgtype.UUID      `json:"user_id"`
	UserName     pgtype.Text      `json:"user_name"`
	ProfileImage pgtype.Text      `json:"profile_image"`
	JoinedAt     pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetRoomMemberInfoByRoomId(ctx context.Context, arg GetRoomMemberInfoByRoomIdParams) ([]GetRoomMemberInfoByRoomIdRow, error) {
	rows, err := q.db.Query(ctx, getRoomMemberInfoByRoomId, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoomMemberInfoByRoomIdRow{}
	for rows.Next() {
		var i GetRoomMemberInfoByRoomIdRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ProfileImage,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMembersTable = `-- name: GetRoomMembersTable :many
SELECT
	room_id, member_id, joined_at
FROM
	room_members
`

func (q *Queries) GetRoomMembersTable(ctx context.Context) ([]RoomMember, error) {
	rows, err := q.db.Query(ctx, getRoomMembersTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoomMember{}
	for rows.Next() {
		var i RoomMember
		if err := rows.Scan(&i.RoomID, &i.MemberID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
