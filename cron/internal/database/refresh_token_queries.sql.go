// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_token_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO
	refresh_tokens (token, user_id, user_email, user_name, expired_at)
VALUES
	($1, $2, $3, $4, $5)
RETURNING
	token, user_id, user_email, user_name, expired_at, created_at
`

type CreateRefreshTokenParams struct {
	Token     string           `json:"token"`
	UserID    pgtype.UUID      `json:"user_id"`
	UserEmail string           `json:"user_email"`
	UserName  string           `json:"user_name"`
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.Token,
		arg.UserID,
		arg.UserEmail,
		arg.UserName,
		arg.ExpiredAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :one
DELETE FROM refresh_tokens
WHERE
	token = $1
RETURNING
	token, user_id, user_email, user_name, expired_at, created_at
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, deleteRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRefreshTokenByUserId = `-- name: DeleteRefreshTokenByUserId :one
DELETE FROM refresh_tokens
WHERE
	user_id = $1
RETURNING
	token, user_id, user_email, user_name, expired_at, created_at
`

func (q *Queries) DeleteRefreshTokenByUserId(ctx context.Context, userID pgtype.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, deleteRefreshTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findRefreshTokenByToken = `-- name: FindRefreshTokenByToken :one
SELECT
	token, user_id, user_email, user_name, expired_at, created_at
FROM
	refresh_tokens
WHERE
	token = $1
`

func (q *Queries) FindRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findRefreshTokenByUserId = `-- name: FindRefreshTokenByUserId :one
SELECT
	token, user_id, user_email, user_name, expired_at, created_at
FROM
	refresh_tokens
WHERE
	user_id = $1
`

func (q *Queries) FindRefreshTokenByUserId(ctx context.Context, userID pgtype.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateTokenExpiratedTimeByToken = `-- name: UpdateTokenExpiratedTimeByToken :one
UPDATE refresh_tokens
SET
	expired_at = $1
WHERE
	token = $2
RETURNING
	token, user_id, user_email, user_name, expired_at, created_at
`

type UpdateTokenExpiratedTimeByTokenParams struct {
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
	Token     string           `json:"token"`
}

func (q *Queries) UpdateTokenExpiratedTimeByToken(ctx context.Context, arg UpdateTokenExpiratedTimeByTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, updateTokenExpiratedTimeByToken, arg.ExpiredAt, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateTokenExpiratedTimeByUserId = `-- name: UpdateTokenExpiratedTimeByUserId :one
UPDATE refresh_tokens
SET
	expired_at = $1
WHERE
	user_id = $2
RETURNING
	token, user_id, user_email, user_name, expired_at, created_at
`

type UpdateTokenExpiratedTimeByUserIdParams struct {
	ExpiredAt pgtype.Timestamp `json:"expired_at"`
	UserID    pgtype.UUID      `json:"user_id"`
}

func (q *Queries) UpdateTokenExpiratedTimeByUserId(ctx context.Context, arg UpdateTokenExpiratedTimeByUserIdParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, updateTokenExpiratedTimeByUserId, arg.ExpiredAt, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.UserEmail,
		&i.UserName,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
