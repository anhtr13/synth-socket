// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: friendship_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO
	friendships (user1_id, user2_id)
VALUES
	($1, $2)
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

type CreateFriendshipParams struct {
	User1ID pgtype.UUID `json:"user1_id"`
	User2ID pgtype.UUID `json:"user2_id"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, createFriendship, arg.User1ID, arg.User2ID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendshipById = `-- name: DeleteFriendshipById :one
DELETE FROM friendships
WHERE
	friendship_id = $1
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

func (q *Queries) DeleteFriendshipById(ctx context.Context, friendshipID pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, deleteFriendshipById, friendshipID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendshipByUserId = `-- name: DeleteFriendshipByUserId :one
DELETE FROM friendships
WHERE
	(
		user1_id = $1
		AND user2_id = $2
	)
	OR (
		user2_id = $1
		AND user1_id = $2
	)
RETURNING
	friendship_id, user1_id, user2_id, created_at
`

type DeleteFriendshipByUserIdParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	FriendID pgtype.UUID `json:"friend_id"`
}

func (q *Queries) DeleteFriendshipByUserId(ctx context.Context, arg DeleteFriendshipByUserIdParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, deleteFriendshipByUserId, arg.UserID, arg.FriendID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const findFriendshipById = `-- name: FindFriendshipById :one
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	friendship_id = $1
`

func (q *Queries) FindFriendshipById(ctx context.Context, friendshipID pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, findFriendshipById, friendshipID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const findFriendshipByUserIds = `-- name: FindFriendshipByUserIds :one
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	(
		user1_id = $1
		AND user2_id = $2
	)
	OR (
		user2_id = $1
		AND user1_id = $2
	)
`

type FindFriendshipByUserIdsParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	FriendID pgtype.UUID `json:"friend_id"`
}

func (q *Queries) FindFriendshipByUserIds(ctx context.Context, arg FindFriendshipByUserIdsParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, findFriendshipByUserIds, arg.UserID, arg.FriendID)
	var i Friendship
	err := row.Scan(
		&i.FriendshipID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const getAllFriendInfoByUserId = `-- name: GetAllFriendInfoByUserId :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image
FROM
	(
		SELECT
			CASE
				WHEN user1_id = $3 THEN user2_id
				WHEN user2_id = $3 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $3
			OR user2_id = $3
		LIMIT
			$1
		OFFSET
			$2
	) fr
	LEFT JOIN users u ON fr.fr_id = u.user_id
`

type GetAllFriendInfoByUserIdParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetAllFriendInfoByUserIdRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     pgtype.Text `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) GetAllFriendInfoByUserId(ctx context.Context, arg GetAllFriendInfoByUserIdParams) ([]GetAllFriendInfoByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getAllFriendInfoByUserId, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllFriendInfoByUserIdRow{}
	for rows.Next() {
		var i GetAllFriendInfoByUserIdRow
		if err := rows.Scan(&i.UserID, &i.UserName, &i.ProfileImage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendInfoByUserAndFriendName = `-- name: GetFriendInfoByUserAndFriendName :many
SELECT
	u.user_id,
	u.user_name,
	u.profile_image
FROM
	(
		SELECT
			CASE
				WHEN user1_id = $3 THEN user2_id
				WHEN user2_id = $3 THEN user1_id
			END AS fr_id
		FROM
			friendships
		WHERE
			user1_id = $3
			OR user2_id = $3
		LIMIT
			$1
		OFFSET
			$2
	) fr
	LEFT JOIN users u ON fr.fr_id = u.user_id
WHERE
	u.user_name LIKE ('%' || $4 || '%')
`

type GetFriendInfoByUserAndFriendNameParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	UserID pgtype.UUID `json:"user_id"`
	Name   pgtype.Text `json:"name"`
}

type GetFriendInfoByUserAndFriendNameRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	UserName     pgtype.Text `json:"user_name"`
	ProfileImage pgtype.Text `json:"profile_image"`
}

func (q *Queries) GetFriendInfoByUserAndFriendName(ctx context.Context, arg GetFriendInfoByUserAndFriendNameParams) ([]GetFriendInfoByUserAndFriendNameRow, error) {
	rows, err := q.db.Query(ctx, getFriendInfoByUserAndFriendName,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.Name,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFriendInfoByUserAndFriendNameRow{}
	for rows.Next() {
		var i GetFriendInfoByUserAndFriendNameRow
		if err := rows.Scan(&i.UserID, &i.UserName, &i.ProfileImage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendshipTable = `-- name: GetFriendshipTable :many
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
`

func (q *Queries) GetFriendshipTable(ctx context.Context) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, getFriendshipTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friendship{}
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.FriendshipID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendshipsByUserId = `-- name: GetFriendshipsByUserId :many
SELECT
	friendship_id, user1_id, user2_id, created_at
FROM
	friendships
WHERE
	user1_id = $1
	OR user2_id = $1
`

func (q *Queries) GetFriendshipsByUserId(ctx context.Context, userID pgtype.UUID) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, getFriendshipsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friendship{}
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.FriendshipID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
