// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: friendrequest_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :one
UPDATE friend_requests
SET
	accepted = TRUE
WHERE
	request_id = $1
	AND receiver_id = $2
RETURNING
	request_id, sender_id, receiver_id, accepted, created_at
`

type AcceptFriendRequestParams struct {
	RequestID  pgtype.UUID `json:"request_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, acceptFriendRequest, arg.RequestID, arg.ReceiverID)
	var i FriendRequest
	err := row.Scan(
		&i.RequestID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const createFriendRequest = `-- name: CreateFriendRequest :one
INSERT INTO
	friend_requests (sender_id, receiver_id)
VALUES
	($1, $2)
RETURNING
	request_id, sender_id, receiver_id, accepted, created_at
`

type CreateFriendRequestParams struct {
	SenderID   pgtype.UUID `json:"sender_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) CreateFriendRequest(ctx context.Context, arg CreateFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, createFriendRequest, arg.SenderID, arg.ReceiverID)
	var i FriendRequest
	err := row.Scan(
		&i.RequestID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendRequest = `-- name: DeleteFriendRequest :exec
DELETE FROM friend_requests
WHERE
	sender_id = $1
	AND receiver_id = $2
`

type DeleteFriendRequestParams struct {
	SenderID   pgtype.UUID `json:"sender_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) DeleteFriendRequest(ctx context.Context, arg DeleteFriendRequestParams) error {
	_, err := q.db.Exec(ctx, deleteFriendRequest, arg.SenderID, arg.ReceiverID)
	return err
}

const getFriendRequestsByReceiver = `-- name: GetFriendRequestsByReceiver :many
SELECT
	fr.request_id, fr.sender_id, fr.receiver_id, fr.accepted, fr.created_at,
	u.user_name sender_name,
	u.profile_image sender_image
FROM
	(
		SELECT
			request_id, sender_id, receiver_id, accepted, created_at
		FROM
			friend_requests
		WHERE
			receiver_id = $1
		LIMIT
			$2
		OFFSET
			$3
	) fr
	LEFT JOIN users u ON fr.sender_id = u.user_id
`

type GetFriendRequestsByReceiverParams struct {
	ReceiverID pgtype.UUID `json:"receiver_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetFriendRequestsByReceiverRow struct {
	RequestID   pgtype.UUID      `json:"request_id"`
	SenderID    pgtype.UUID      `json:"sender_id"`
	ReceiverID  pgtype.UUID      `json:"receiver_id"`
	Accepted    pgtype.Bool      `json:"accepted"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	SenderName  pgtype.Text      `json:"sender_name"`
	SenderImage pgtype.Text      `json:"sender_image"`
}

func (q *Queries) GetFriendRequestsByReceiver(ctx context.Context, arg GetFriendRequestsByReceiverParams) ([]GetFriendRequestsByReceiverRow, error) {
	rows, err := q.db.Query(ctx, getFriendRequestsByReceiver, arg.ReceiverID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFriendRequestsByReceiverRow{}
	for rows.Next() {
		var i GetFriendRequestsByReceiverRow
		if err := rows.Scan(
			&i.RequestID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Accepted,
			&i.CreatedAt,
			&i.SenderName,
			&i.SenderImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectFriendRequest = `-- name: RejectFriendRequest :one
DELETE FROM friend_requests
WHERE
	request_id = $1
	AND receiver_id = $2
RETURNING
	request_id, sender_id, receiver_id, accepted, created_at
`

type RejectFriendRequestParams struct {
	RequestID  pgtype.UUID `json:"request_id"`
	ReceiverID pgtype.UUID `json:"receiver_id"`
}

func (q *Queries) RejectFriendRequest(ctx context.Context, arg RejectFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, rejectFriendRequest, arg.RequestID, arg.ReceiverID)
	var i FriendRequest
	err := row.Scan(
		&i.RequestID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}
